{"version":3,"file":"static/js/243.9e4c6909.chunk.js","mappings":"oLACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,sBAAsB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCa7M,EAVmB,SAACA,GAEjB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACG,gBAAKC,UAAWC,EAAAA,KAAhB,UAA8B,SAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAAAA,OAApC,SAAqDJ,EAAMO,UCA/F,EALgB,SAACP,GACd,OAAO,gBAAKG,UAAWC,EAAAA,QAAhB,SAAkCJ,EAAMQ,W,uCCmC5CC,GAAcC,EAAAA,EAAAA,GAAiB,IAW/BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAK,wBAAhBD,EATL,SAACZ,GACpB,OACI,kBAAMG,UAAWC,EAAAA,SAAkBU,SAAUd,EAAMe,aAAnD,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAcF,KAAM,gBAAiBc,YAAa,wBACnG,mBAAQlB,UAAWC,EAAAA,UAAnB,wBAOZ,EA3CgB,SAACJ,GAEd,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAiBF,EAAMG,YAAYC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAML,GAAIyB,EAAEzB,QAE5E0B,EAAmBN,EAAMO,aAAaH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAStB,QAASsB,EAAEtB,aAOvE,OACG,iBAAKL,UAAWC,EAAAA,QAAhB,WACG,gBAAKD,UAAWC,EAAAA,aAAhB,SAEIoB,KAGJ,gBAAKrB,UAAWC,EAAAA,SAAhB,SAEIwB,KAGD,SAACjB,EAAD,CAAqBG,SAjBT,SAACiB,GAClB/B,EAAMgC,iBAAiBD,EAAOE,sB,2DCfjCC,EAA6B,SAACZ,GAAD,MAAY,CACzCa,OAAQb,EAAMc,KAAKD,SCmBvB,GAAeE,E,QAAAA,KACXC,EAAAA,EAAAA,KAjBkB,SAAChB,GACpB,MAAO,CACJC,YAAcD,EAAMC,gBAID,SAACgB,GACvB,MAAO,CAEJP,iBAAmB,SAACC,GACjBM,GAASP,EAAAA,EAAAA,GAAiBC,UDVH,SAACO,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKC,KAAK1C,MAAMmC,QACT,SAACK,GAAD,UAAeE,KAAK1C,SADI,SAAC,KAAD,CAAUK,GAAI,eAHV,GACXsC,EAAAA,WAShC,OAFqCL,EAAAA,EAAAA,IAAQJ,EAARI,CAAoCG,KCQ7E,CAGEG","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__NM7sd\",\"dialog_items\":\"Dialogs_dialog_items__oCcbX\",\"item\":\"Dialogs_item__47CaP\",\"active\":\"Dialogs_active__OXwUZ\",\"messages\":\"Dialogs_messages__nzqjM\",\"message\":\"Dialogs_message__k-cff\"};","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n   let path = \"/dialogs/\" + props.id;\r\n\r\n   return (\r\n      <div className={classes.item}><NavLink to={path} activeClassName={classes.active}>{props.name}</NavLink></div >\r\n   )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\n\r\nconst Message = (props) => {\r\n   return <div className={classes.message}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/formcontrols/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n   let state = props.dialogsPage;\r\n\r\n   let dialogElements = state.dialogsData.map(d => <DialogItem name={d.name} id={d.id} />);\r\n\r\n   let messagesElements = state.messagesData.map(m => <Message message={m.message} />);\r\n\r\n    let addNewMessage = (values) => {\r\n       props.addDialogCreator(values.newDialogText);\r\n\r\n    }\r\n\r\n   return (\r\n      <div className={classes.dialogs}>\r\n         <div className={classes.dialog_items}>\r\n\r\n            {dialogElements}\r\n\r\n         </div>\r\n         <div className={classes.messages}>\r\n\r\n            {messagesElements}\r\n\r\n         </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n      </div>\r\n   )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={classes.new_post} onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} validate={[required, maxLength50]} name={\"newDialogText\"} placeholder={\"Enter your message\"}/>\r\n            <button className={classes.send_post}>Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm)\r\n\r\nexport default Dialogs;","import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>;\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import { connect } from \"react-redux\";\r\nimport {addDialogCreator} from '../../redux/dialogs-reducer'\r\nimport Dialogs from \"./Dialogs\";\r\nimport React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n   return {\r\n      dialogsPage : state.dialogsPage,\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n   return {\r\n\r\n      addDialogCreator : (newDialogText) => {\r\n         dispatch(addDialogCreator(newDialogText));\r\n      }\r\n   }\r\n}\r\n\r\n\r\nexport default compose(\r\n    connect (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"names":["props","path","id","className","classes","to","activeClassName","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogElements","dialogsData","map","d","messagesElements","messagesData","m","values","addDialogCreator","newDialogText","mapStateToPropsForRedirect","isAuth","auth","compose","connect","dispatch","Component","RedirectComponent","this","React","Dialogs"],"sourceRoot":""}